openapi: 3.0.0

info:
  description: This is the API of the QuizMaster backend.
  version: 1.0.0
  title: QuizMaster API
  
tags:
  - name: Quizzes
    description: Requests for creating quizzes
    
  - name: Questions
    description: Requests for CRUD operations on questions
    
paths:
  # quizzes
  /quiz:
    post:
      tags:
        - Quizzes
      summary: Get an array of random question IDs for starting a quiz basing on them
      requestBody:
        $ref: '#/components/requestBodies/NewRandomQuiz'
      responses:
        201:
          description: Returns an array of X question IDs where X is the value of 'questionCount'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'
        400:
          $ref: '#/components/responses/BadRequestError'
               
  # questions
  /question:
    post:
      security:
        - AdminTokenAuth: []
      tags:
        - Questions
      summary: Create a new question
      requestBody:
        $ref: '#/components/requestBodies/NewOrUpdatedQuestion'
      responses:
        201:
          description: Created
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/ForbiddenError'
  
  /question/{id}:
    get:
      tags:
        - Questions
      summary: Get the question with the given ID
      parameters:
        - name: id
          in: path
          description: ID of the question
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        404:
          $ref: '#/components/responses/NotFoundError'
    put:
      security:
        - AdminTokenAuth: []
      tags:
        - Questions
      summary: Update the question with the given ID
      parameters:
        - name: id
          in: path
          description: ID of the question
          required: true
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/NewOrUpdatedQuestion'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    delete:
      security:
        - AdminTokenAuth: []
      tags:
        - Questions
      summary: Remove the question with the given ID
      parameters:
        - name: id
          in: path
          description: ID of the question
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    
security:
  - AdminTokenAuth: []
    
components:

  securitySchemes:
    AdminTokenAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: Admin key from the server's console output after startup
      
  responses:
    BadRequestError:
      description: Bad request (e.g. wrong formatted parameters)
    UnauthorizedError:
      description: Admin token is missing or invalid
    ForbiddenError:
      description: Access on the given resource denied
    NotFoundError:
      description: The resource does not exist on the server

  requestBodies:
    NewRandomQuiz:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewRandomQuiz'
      description: Contains the count of question IDs that should be returned and optionally IDs of questions that were already used by the client
      required: true
      
    NewOrUpdatedQuestion:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewOrUpdatedQuestion'
      description: Contains the values to create a new Question object including its answers
      required: true
      
  schemas:
    # request objects
    NewRandomQuiz:
      type: object
      properties:
        questionCount:
          type: integer
          description: count of question IDs in the returned quiz
        alreadyUsedQuestions:
          type: array
          items:
            type: integer
          description: (optional) array of question IDs that were already used; thus if the backend contains enough other questions those questions will not be returned in the response array
      required:
        - questionCount
      example:
        id: 37
        alreadyUsedQuestions: [ 3, 27, 18 ]

    NewOrUpdatedQuestion:
      type: object
      properties:
        correctAnswer:
          type: string
        wrongAnswers:
          type: array
          items:
            type: string
          minLength: 3
          maxLength: 3
      required:
        - correctAnswer
        - wrongAnswers
      example:
        correctAnswer: "This is my correct answer."
        wrongAnswers:
          [
            "This is my first wrong answer.",
            "This is my second wrong answer.",
            "This is my third wrong answer.",
          ]
          
    # response objects
    Quiz:
      type: array
      minItems: 10
      maxItems: 30
      items:
        type: integer
      example: [ 13, 26, 7, 33 ]

    Question:
      type: object
      properties:
        id:
          type: integer
          format: int64
        possibleAnswers:
          type: array
          items:
            type: object
            properties:
              answerLetter:
                type: string
                enum: [A, B, C, D]
              answerText:
                type: string
            minLength: 4
            maxLength: 4
        correctAnswer:
          type: string
          enum: [A, B, C, D]
      required:
        - id
        - possibleAnswers
        - correctAnswer
      example:
        id: 9
        possibleAnswers:
          [
            {
              answerLetter: A,
              answerText: Answer A
            },
            {
              answerLetter: B,
              answerText: Answer B
            },
            {
              answerLetter: C,
              answerText: Answer C
            },
            {
              answerLetter: D,
              answerText: Answer D
            },
          ]
        correctAnswer: B