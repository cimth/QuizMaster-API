openapi: 3.0.0

info:
  description: This is the API of the QuizMaster backend.
  version: 1.0.0
  title: QuizMaster API
  
tags:
  - name: Quizzes
    description: Requests for CRUD operations on quizzes
    
  - name: Questions
    description: Requests for CRUD operations on questions
    
paths:
  # quizzes
  /quiz:
    post:
      security:
        - AdminTokenAuth: []
      tags:
        - Quizzes
      summary: Creates an (empty) predefined quiz with the given name
      requestBody:
        $ref: '#/components/requestBodies/NewPredefinedQuiz'
      responses:
        201:
          description: Created
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: At least one of the given questions which should be applied to the quiz does not exist

  /quiz/random:
    get:
      tags:
        - Quizzes
      summary: Get an array of random question IDs for starting a quiz basing on them
      requestBody:
        $ref: '#/components/requestBodies/NewRandomQuiz'
      responses:
        200:
          description: Returns an array of X question IDs where X is the value of 'questionCount'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'
        400:
          $ref: '#/components/responses/BadRequestError'
        404:
          description: Not enough questions for creating a quiz (at least 10 questions have to exist)

  /quiz/predefined:
    get:
      tags:
        - Quizzes
      summary: Get an array of all predefined quizzes in a nice-to-use representation
      responses:
        200:
          $ref: '#/components/responses/AllPredefinedQuizzes'

  /quiz/{id}:
    get:
      tags:
        - Quizzes
      summary: Get the array of question IDs applied to the predefined quiz with the given ID
      parameters:
        - name: id
          in: path
          description: ID of the predefined quiz
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Returns an array of X question IDs where X is the count of the questions that are applied to the predefined quiz
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'
        404:
            $ref: '#/components/responses/NotFoundError'
    put:
      security:
        - AdminTokenAuth: []
      tags:
        - Quizzes
      summary: Updates the predefined quiz with the given ID.
      description: With this request you can change the quiz name, apply questions to the quiz or delete existing question associations.
      parameters:
        - name: id
          in: path
          description: ID of the predefined quiz
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/UpdatePredefinedQuiz'
      responses:
        200:
          description: OK
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  # questions
  /question:
    post:
      security:
        - AdminTokenAuth: []
      tags:
        - Questions
      summary: Create a new question
      requestBody:
        $ref: '#/components/requestBodies/NewOrUpdatedQuestion'
      responses:
        201:
          description: Created
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    get:
      tags:
        - Questions
      summary: Get all questions from the database in raw format
      description: The raw format is supposed to be used for managing questions.
      responses:
        200:
          $ref: '#/components/responses/AllQuestions'
  
  /question/{id}:
    get:
      tags:
        - Questions
      summary: Get the question with the given ID in raw format
      description: The raw format is supposed to be used for managing questions.
      parameters:
        - name: id
          in: path
          description: ID of the question
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionInRawFormat'
        404:
          $ref: '#/components/responses/NotFoundError'
    put:
      security:
        - AdminTokenAuth: []
      tags:
        - Questions
      summary: Update the question with the given ID
      parameters:
        - name: id
          in: path
          description: ID of the question
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/NewOrUpdatedQuestion'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionInPlayFormat'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    delete:
      security:
        - AdminTokenAuth: []
      tags:
        - Questions
      summary: Remove the question with the given ID
      parameters:
        - name: id
          in: path
          description: ID of the question
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'

  /question/{id}/playFormat:
    get:
      tags:
        - Questions
      summary: Get the question with the given ID in play format
      description:
        The play format contains the answers in a shuffled way and also provides answer letters for easier use in the frontend.
      parameters:
        - name: id
          in: path
          description: ID of the question
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionInPlayFormat'
        404:
          $ref: '#/components/responses/NotFoundError'

security:
  - AdminTokenAuth: []
    
components:

  securitySchemes:
    AdminTokenAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: Admin key from the server's console output after startup
      
  responses:
    BadRequestError:
      description: Bad request (e.g. wrong formatted or invalid parameters). The response body will show more details about the occured error(s).

    UnauthorizedError:
      description: Admin token is missing or invalid

    NotFoundError:
      description: The resource does not exist on the server

    AllPredefinedQuizzes:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AllPredefinedQuizzes'
      description: Contains all predefined quizzes from the database in a nice-to-use representation

    AllQuestions:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AllQuestions'
      description: Contains all questions from the database (unprocessed, thus without answer letters etc.)

  requestBodies:
    NewRandomQuiz:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewRandomQuiz'
      description: Contains the count of question IDs that should be returned and optionally IDs of questions that were already used by the client
      required: true

    NewPredefinedQuiz:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewPredefinedQuiz'
      description: Contains the name of the predefined quiz which is about to be created
      required: true

    UpdatePredefinedQuiz:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdatePredefinedQuiz'
      description: Contains the data of the predefined quiz which are possibly different of the original data
      required: true

    NewOrUpdatedQuestion:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewOrUpdatedQuestion'
      description: Contains the values to create a new Question object including its answers
      required: true
      
  schemas:
    # request objects
    NewRandomQuiz:
      type: object
      properties:
        questionCount:
          type: integer
          description: count of question IDs in the returned quiz
        alreadyUsedQuestions:
          type: array
          items:
            type: integer
          description: (optional) array of question IDs that were already used; thus if the backend contains enough other questions those questions will not be returned in the response array
      required:
        - questionCount
      example:
        questionCount: 15
        alreadyUsedQuestions: [ 3, 27, 18 ]

    NewPredefinedQuiz:
      type: object
      properties:
        quizName:
          type: string
          description: the name of the quiz to be created
      required:
        - quizName
      example:
        quizName: My new Quiz

    UpdatePredefinedQuiz:
      type: object
      properties:
        quizName:
          type: string
          description: the (updated) name of the quiz
        quizQuestions:
          type: array
          items:
            type: integer
            format: int64
      required:
        - quizName
        - quizQuestions
      example:
        quizName: My updated Quiz
        quizQuestions: [1, 6, 19, 3]

    NewOrUpdatedQuestion:
      type: object
      properties:
        questionText:
          type: string
        correctAnswer:
          type: string
        wrongAnswers:
          type: array
          items:
            type: string
          minLength: 3
          maxLength: 3
      required:
        - questionText
        - correctAnswer
        - wrongAnswers
      example:
        questionText: "What is my question?"
        correctAnswer: "This is my correct answer."
        wrongAnswers:
          [
            "This is my first wrong answer.",
            "This is my second wrong answer.",
            "This is my third wrong answer.",
          ]
          
    # response objects
    Quiz:
      type: array
      items:
        type: integer
      example: [ 13, 26, 7, 33 ]

    AllPredefinedQuizzes:
      type: array
      items:
        type: object
        properties:
          quizId:
            type: integer
            format: int64
          quizName:
            type: string
          quizCount:
            type: integer
        example:
          {
            quizId: 5,
            quizName: My Quiz,
            quizQuestions: 13
          }

    QuestionInRawFormat:
      type: object
      properties:
        id:
          type: integer
          format: int64
        questionText:
          type: string
        correctAnswer:
          type: string
        wrongAnswer1:
          type: string
        wrongAnswer2:
          type: string
        wrongAnswer3:
          type: string
      required:
        - id
        - questionText
        - correctAnswer
        - wrongAnswer1
        - wrongAnswer2
        - wrongAnswer3

    QuestionInPlayFormat:
      type: object
      properties:
        id:
          type: integer
          format: int64
        questionText:
          type: string
        possibleAnswers:
          type: array
          items:
            type: object
            properties:
              answerLetter:
                type: string
                enum: [A, B, C, D]
              answerText:
                type: string
            minLength: 4
            maxLength: 4
        correctAnswer:
          type: string
          enum: [A, B, C, D]
      required:
        - id
        - questionText
        - possibleAnswers
        - correctAnswer
      example:
        id: 9
        questionText: Which answer is correct?
        possibleAnswers:
          [
            {
              answerLetter: A,
              answerText: Answer A
            },
            {
              answerLetter: B,
              answerText: Answer B
            },
            {
              answerLetter: C,
              answerText: Answer C
            },
            {
              answerLetter: D,
              answerText: Answer D
            },
          ]
        correctAnswer: B

    AllQuestions:
      type: array
      items:
        $ref: '#/components/schemas/QuestionInRawFormat'